#!/bin/fish

set -g BUILD_ARGV $argv

set_color green
echo QtBuildScript
echo "  A fish shell script to simplify your Qt build experience."
echo
set_color normal

if not source (dirname (status --current-filename))/utils/common.fish 2>/dev/null
    set_color red
    echo "Initialization failed."
    exit 1
end

cd $BASE_DIR

if test -n "$QT_BUILDSCRIPT_EXPORTED"
    set_color red
    echo "You are probably running the build script from an environment"
    echo "that is generated by its own exported one, undefined things could happen!"
    echo ""
    echo "Press enter to continue."
    set_color normal
    read -p echo
end

set -g EXTRA_EXPORT_VARIABLES
set -g EXTRA_CMAKE_ARGUMENTS

set -le arg_flag
set -lp arg_flag (fish_opt --short=p --long=platform --required-val)
set -lp arg_flag (fish_opt --short=a --long=arch --required-val)
set -lp arg_flag (fish_opt --short=h --long=host-path --required-val)
set -lp arg_flag (fish_opt --short=j --long=parallel --optional-val)
set -lp arg_flag (fish_opt --short=1 --long=help --long-only)
set -lp arg_flag (fish_opt --short=k --long=skip-cleanup)
set -lp arg_flag (fish_opt --short=E --long=export --required-val)

set_color red
argparse $arg_flag -- $argv || exit 1
set_color normal

set SUPPORTED_PLATFORMS (basename -s .fish $BASE_DIR/utils/platforms/* | sort)
set SUPPORTED_KITS (basename -s .fish $BASE_DIR/utils/kits/* | sort)

if set -q _flag_help
    echo "Usage:"
    echo "  "(status --current-filename) --help
    echo "  "(status --current-filename) "[options] [kits]"
    echo ""
    echo "options:"
    echo "  -p, --platform=<platform>   The target platform, default value is 'desktop'"
    echo "  -a, --arch=<arch>           Target architecture, default='x86_64', platform-specific."
    echo "  -h, --host-path=<path>      Path to the Qt host build directory, can be automatically detected if unspecified."
    echo "  -j, --parallel=<N>          Run N jobs at once, can be automatically detected from nproc if unspecified."
    echo "  -k, --skip-cleanup          Skip cleanup the build directory."
    echo "  -E, --export=<file>         Export prepared environment variables to a custom file only, do not perform build."
    echo ""
    echo "available kits:"
    echo "  combination of:"
    printf '  - %s\n' $SUPPORTED_KITS
    echo ""
    echo "available platforms:"
    printf '  - %s\n' $SUPPORTED_PLATFORMS
    exit 0
end

set PARALLEL_LEVEL (if test -z "$_flag_parallel"; nproc; else; echo "$_flag_parallel"; end)
set SKIP_CLEANUP (if set -q _flag_skip_cleanup; echo "1"; else; echo "0"; end)
set QT_PLATFORM (if test -z "$_flag_platform"; echo "desktop"; else; echo "$_flag_platform"; end)
set QT_ARCH (if test -z "$_flag_arch"; echo "x86_64"; else; echo "$_flag_arch"; end)
set EXPORT_PATH "$_flag_export"

if not contains -- "$QT_PLATFORM" $SUPPORTED_PLATFORMS
    set_color red
    echo "Platform '$QT_PLATFORM' not supported."
    exit 1
end

for kit in $argv
    if not contains -- "$kit" $SUPPORTED_KITS
        set_color red
        echo "Build kit '$kit' not supported."
        exit 1
    end
end

# Prepend base-kits if exists
if test -e $BASE_DIR/.base-kits
    set_color green
    echo -n "Applying base kits from: "
    set_color normal
    echo "$BASE_DIR/.base-kits"

    set_color green
    echo -n "Base Kits:"
    set_color normal

    for k in (cat $BASE_DIR/.base-kits)
        echo -n " $k"
        set -p argv "$k"
    end
end

# If kits are empty, apply default kits.
if test -z "$argv"
    set_color blue
    echo -n "Applying default kits from: "
    set_color normal
    echo "$BASE_DIR/.default-kits"

    set_color green
    echo -n "Default Kits:"
    set_color normal

    set argv
    for k in (cat $BASE_DIR/.default-kits)
        echo -n " $k"
        set -p argv "$k"
    end
end

if [ "$QT_PLATFORM" != desktop ]
    echo ""
    if not set -q _flag_host_path
        set -l desktops $BASE_DIR/Current/desktop*
        if set -q desktops[1]
            set QT_HOST_PATH (realpath $desktops[1])
            set_color green
            echo -n "Detected QT_HOST_PATH: "
            set_color normal
            echo $QT_HOST_PATH
        else
            set_color red
            echo "Cannot automatically detect Qt host path, please specify one using the -h option."
            exit 1
        end
    else
        set QT_HOST_PATH $_flag_host_path
    end
end

echo ""

set -g BUILD_KITS $argv
echo ""
lastdedup BUILD_KITS
set_color green && echo -n "Build Kits: " && set_color normal
echo $BUILD_KITS

if source "$BASE_DIR/utils/platforms/$QT_PLATFORM.fish" 2>/dev/null
    set_color green
    echo -n "Build Platform: "
    set_color normal
    echo "$QT_PLATFORM"
else
    set_color red
    echo "Failed to initialise platform '$QT_PLATFORM'."
    exit 1
end

echo ""

set BUILD_KITS_DISPLAY $BUILD_KITS
set_color green
echo "Loading Kits..."
set_color normal

for kit in $BUILD_KITS
    if not contains -- $kit $SUPPORTED_KITS
        set_color red
        echo "Build kit '$kit' not supported."
        exit 1
    end

    set_color green
    echo -n " Loading Kit: "
    set_color normal
    echo "$kit"

    set_color blue
    if not source "$BASE_DIR/utils/kits/$kit.fish" 2>/dev/null
        set_color red
        echo "Failed to load '$kit'."
        exit 1
    end
end

set BUILD_TYPE (string join '-' -- "$QT_PLATFORM" $QT_ARCH (string join '-' (for k in $BUILD_KITS_DISPLAY; echo $k; end | sort | uniq)))

echo ""
set_color green && echo -n "Build Identifier: " && set_color normal
echo $BUILD_TYPE

set -g BUILD_DIR "$BASE_DIR/.build/$BUILD_TYPE"
set -g INSTALL_DIR "$BASE_DIR/nightly/$BUILD_TYPE/"(date -I)

set -p EXTRA_CMAKE_ARGUMENTS -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR/
set -p EXTRA_CMAKE_ARGUMENTS -GNinja

for x in (echo -n $CMAKE_ARGUMENTS_PREPEND | sed 's/ /\n/g')
    set -p EXTRA_CMAKE_ARGUMENTS $x
end

for x in (echo -n $CMAKE_ARGUMENTS_APPEND | sed 's/ /\n/g')
    set -a EXTRA_CMAKE_ARGUMENTS $x
end

echo ""
echo "CMake arguments:"
set_color blue
for arg in $EXTRA_CMAKE_ARGUMENTS
    echo " $arg"
end
set_color normal

set -p EXTRA_CMAKE_ARGUMENTS -DQT_BUILD_SUBMODULES=(string join ';' -- $QT_MODULES)

echo ""
if [ "$SKIP_CLEANUP" = 1 ]
    set_color yellow
    echo -n "Will not cleanup build directory: "
    set_color normal
    echo "$BUILD_DIR"
end

mkdir -p "$BASE_DIR/Current/"
mkdir -p "$BASE_DIR/nightly/"

mkdir -p $BUILD_DIR

set_color yellow
echo "Will build with $PARALLEL_LEVEL concurrent jobs."
set_color normal

# Do not count down in export mode.
if test -z "$EXPORT_PATH"
    set_color yellow
    echo -n "Will start building in 5 seconds, press Ctrl+C to cancel: "
    for sec in 5 4 3 2 1
        echo -n "$sec..."
        sleep 1
    end
    set_color normal
    echo ""

    if [ "$SKIP_CLEANUP" = 0 ]
        source $BASE_DIR/utils/cleanup.fish
    end
else
    set _canexport 0
    if rm "$EXPORT_PATH" 2>/dev/null || touch "$EXPORT_PATH"
        echo "# Compilation Environment File for kit '$BUILD_TYPE'" | tee "$EXPORT_PATH" 1>/dev/null 2>/dev/null

        if test $status -eq 0
            set _canexport 1
        end
    end

    if not test $_canexport -eq 1
        set_color red
        echo "Failed to export compilation environment to $EXPORT_PATH"
        set_color normal
        exit 1
    end

    echo "# File generated by calling with argv='$BUILD_ARGV'" >>"$EXPORT_PATH"
    echo "#" >>"$EXPORT_PATH"
    echo '# Example Usage:' >>"$EXPORT_PATH"
    echo "#" >>"$EXPORT_PATH"
    echo '# source ./this-file' >>"$EXPORT_PATH"
    echo '# mkdir -p $BUILD_DIR && cd $BUILD_DIR' >>"$EXPORT_PATH"
    echo '# cmake $SRC_DIR $EXTRA_CMAKE_ARGUMENTS' >>"$EXPORT_PATH"
    echo '# cmake --build . --parallel $PARALLEL_LEVEL' >>"$EXPORT_PATH"
    echo '# cd $BASE_DIR' >>"$EXPORT_PATH"
    echo '# Then run ./utils/finalise.fish to perform finalisation.' >>"$EXPORT_PATH"
    echo "" >>"$EXPORT_PATH"
    echo "echo 'Initializing Qt Build Environment....'" >>"$EXPORT_PATH"

    function exportenv
        echo "" >>"$EXPORT_PATH"
        echo "# $argv[1]: $argv[2]" >>"$EXPORT_PATH"
        echo "export $argv[1]='$$argv[1]'" >>"$EXPORT_PATH"
        echo "echo $argv[1]=\$$argv[1]" >>"$EXPORT_PATH"
    end

    set QT_BUILDSCRIPT_EXPORTED 1
    exportenv QT_BUILDSCRIPT_EXPORTED "Mark the environment as exported"
    exportenv SKIP_CLEANUP "Skip cleaning up build directories"
    exportenv PATH "Executable search paths"
    exportenv BUILD_DIR "Build output directory"
    exportenv BUILD_TYPE "Build type"
    exportenv BUILD_KITS "Build kits"
    exportenv BASE_DIR "Base script directory"
    exportenv SRC_DIR "Source files' directory"
    exportenv PARALLEL_LEVEL "Level of parallelism"
    exportenv EXTRA_CMAKE_ARGUMENTS "CMake arguments"
    exportenv INSTALL_DIR "Installation prefix"
    exportenv QT_PLATFORM "Qt target plarform"
    exportenv QT_ARCH "Qt target architecture"
    exportenv QT_HOST_PATH "Qt host build path"
    exportenv QT_MODULES "Qt submodules to build"

    for v in $EXTRA_EXPORT_VARIABLES
        exportenv $v "$v"
    end

    echo "Created $EXPORT_PATH"
    echo "See the content of the generated file for its usage."
end

if test -z "$EXPORT_PATH"
    cd $BUILD_DIR
    cmake $SRC_DIR $EXTRA_CMAKE_ARGUMENTS || exit 1
    cmake --build . --parallel $PARALLEL_LEVEL || exit 1

    set QT_BUILDSCRIPT_EXPORTED 1
    source $BASE_DIR/utils/finalise.fish || exit 1
end
