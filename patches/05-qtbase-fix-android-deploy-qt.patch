From 15b53e2916da90b5fb9f16c86587f51dfd51d9ee Mon Sep 17 00:00:00 2001
From: Moody Liu <mooodyhunter@outlook.com>
Date: Wed, 18 May 2022 01:17:56 +0100
Subject: [PATCH] fix androiddeployqt with user application with in-tree QML modules

when deploying user applications with QML modules located under user's
subdirectories, (e.g. some third-party QML components used as git
submomdule). The qmldir for such QML modules will be, typically,
generated under BUILD_DIR/android-qml.

if a BUILD_DIR is under the source directory, androiddeployqt will skip
those QML modules incorrectly because they "appeared to be under the
QML root path so that seems can be imported", however without deploying
them, it's impossible to import those modules on an Android device.

this patch adds a check that also tests if a root path plus the module's
url can actually lead to the correct module path, so a QML module under
android-qml subdir would not pass the test, and thus won't be skipped.

Task-number: QTBUG-103593
Change-Id: I8af76bd38cd55700e17794cf2fff0e50a90ac87e
---

diff --git a/src/tools/androiddeployqt/main.cpp b/src/tools/androiddeployqt/main.cpp
index 612683c..8e150d5 100644
--- a/src/tools/androiddeployqt/main.cpp
+++ b/src/tools/androiddeployqt/main.cpp
@@ -1880,7 +1880,8 @@
 }
 
 bool goodToCopy(const Options *options, const QString &file, QStringList *unmetDependencies);
-bool checkQmlFileInRootPaths(const Options *options, const QString &absolutePath);
+bool checkCanImportFromRootPaths(const Options *options, const QString &absolutePath,
+                                 const QUrl &moduleUrl);
 
 bool scanImports(Options *options, QSet<QString> *usedDependencies)
 {
@@ -2008,7 +2009,9 @@
             if (!absolutePath.endsWith(u'/'))
                 absolutePath += u'/';
 
-            if (checkQmlFileInRootPaths(options, absolutePath)) {
+            const QUrl url(object.value("name"_L1).toString());
+
+            if (checkCanImportFromRootPaths(options, info.absolutePath(), url)) {
                 if (options->verbose)
                     fprintf(stdout, "    -- Skipping because path is in QML root path.\n");
                 continue;
@@ -2100,10 +2103,12 @@
     return true;
 }
 
-bool checkQmlFileInRootPaths(const Options *options, const QString &absolutePath)
+bool checkCanImportFromRootPaths(const Options *options, const QString &absolutePath,
+                                 const QUrl &moduleUrl)
 {
+    const QString pathFromUrl = u"/"_s + moduleUrl.toString().replace(u'.', u'/');
     for (auto rootPath : options->rootPaths) {
-        if (absolutePath.startsWith(rootPath))
+        if (absolutePath.startsWith(rootPath) && (rootPath + pathFromUrl) == absolutePath)
             return true;
     }
     return false;
